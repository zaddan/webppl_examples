//----this file contains the helpers that I have writtin in addition to some 
//---notes on the language

//---a distribution is made on top of another distribution + an inference 
//---operator (Enumerate + particleFilter)
//---note that distribution provide a value with a probability
//---for example binomialERP is a distribution
var binomial = function(){
    var a = sample(bernoulliERP, [0.5]);
    var b = sample(bernoulliERP, [0.5]);
    var c = sample(bernoulliERP, [0.5]);
    return a + b + c;
}
var binomialERP = Enumerate(binomial)

//---can ask about the probability of a value using score
console.log(Math.exp(binomialERP.score([], 2)))



//---map over the values of a dictionary
var map_helper_dic = function(i, j, f) {
  var n = j - i + 1;
  if (n == 0) {
    return []
  } else if (n == 1) {
    return [f(i)];
  } else {
    var n1 = Math.ceil(n / 2);
    return map_helper_dic(i, i + n1 - 1, f).concat(map_helper_dic(i + n1, j, f));
  }
}

// recursively split input array so that we only call
// concat a logarithmic number of times
var map_dic = function(fn, l) {
  return map_helper_dic(0, (Object.keys(l).length) - 1, function(i) { return fn(l[Object.keys(l)[i]]) })
}


//--examples
console.log(map_dic(function(x) {return x}, {0:1,9:2,4:4, 5:5}))
console.log(map_dic(function(x) {return x.val}, Enumerate(binomial).hist))


//--using ParticleFilter for cases that are not countable
console.log(ParticleFilter(function() { return uniform(6,10)}, 100))
return 1
